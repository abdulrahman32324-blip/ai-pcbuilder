declare const jspdf: any;
declare const html2canvas: any;

export const exportBuildToPdf = (buildId: string, buildName: string): void => {
    const element = document.getElementById(buildId);
    if (!element) {
        console.error("Build element not found for PDF export");
        return;
    }

    const { jsPDF } = jspdf;
    
    const scale = 2; // Increase resolution for better quality

    html2canvas(element, {
        scale: scale,
        useCORS: true,
        backgroundColor: null, 
        onclone: (document: Document) => {
            const isDark = document.documentElement.classList.contains('dark');
            const clonedElement = document.getElementById(buildId);
            if (clonedElement) {
                clonedElement.style.margin = '0';
                clonedElement.style.boxShadow = 'none';
                // Add padding to create space for a header and footer
                clonedElement.style.paddingTop = '50px';
                clonedElement.style.paddingBottom = '30px';
                 if(isDark) {
                    clonedElement.classList.add('dark');
                 }
            }
        }
    }).then((canvas: HTMLCanvasElement) => {
        const imgData = canvas.toDataURL('image/png');
        const pdf = new jsPDF({
            orientation: 'p',
            unit: 'px',
            format: 'a4'
        });

        const pdfWidth = pdf.internal.pageSize.getWidth();
        const pdfHeight = pdf.internal.pageSize.getHeight();
        
        const canvasWidth = canvas.width;
        const canvasHeight = canvas.height;
        
        const ratio = canvasWidth / canvasHeight;
        const imgWidth = pdfWidth;
        const imgHeight = imgWidth / ratio;
        
        let heightLeft = imgHeight;
        let position = 0;
        let pageCount = 1;

        pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
        heightLeft -= pdfHeight;

        while (heightLeft > 0) {
            position -= pdfHeight;
            pdf.addPage();
            pageCount++;
            pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
            heightLeft -= pdfHeight;
        }

        // Add header and footer to all pages
        for (let i = 1; i <= pageCount; i++) {
            pdf.setPage(i);
            
            // Header
            pdf.setFontSize(16);
            pdf.setFont('helvetica', 'bold');
            const headerColor = document.documentElement.classList.contains('dark') ? '#c4b5fd' : '#6d28d9';
            pdf.setTextColor(headerColor);
            pdf.text(buildName, pdfWidth / 2, 30, { align: 'center' });

            // Footer
            pdf.setFontSize(8);
            const footerColor = document.documentElement.classList.contains('dark') ? '#9ca3af' : '#4b5563';
            pdf.setTextColor(footerColor);
            pdf.text(`Page ${i} of ${pageCount}`, pdfWidth / 2, pdfHeight - 15, { align: 'center' });
            pdf.text('Generated by AI PCBuilder', pdfWidth - 20, pdfHeight - 15, { align: 'right' });
        }


        pdf.save(`${buildName.replace(/\s/g, '_')}_AIPCBuilder.pdf`);
    });
};